x-locust-worker: &default-worker
  image: locustio/locust
  volumes:
    - ./locust:/mnt/locust
  command: -f /mnt/locust/fetch-member.py --worker --master-host locust-master
  networks:
    - sso_network
  depends_on:
    - locust-master

services:
  sso_mariadb:
    image: mariadb:latest
    container_name: sso_mariadb
    environment:
      MYSQL_ROOT_PASSWORD: passwd
      MYSQL_DATABASE: sso
      MYSQL_USER: octatco
      MYSQL_PASSWORD: passwd
      TZ: Asia/Seoul
    ports:
      - "13306:3306"
    volumes:
      - /data/mariadb:/var/lib/mysql
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
    networks:
      sso_network:
        ipv4_address: 172.30.0.100

  locust-master:
    image: locustio/locust
    ports:
      - "8089:8089"
    volumes:
      - ./locust:/mnt/locust
    command: -f /mnt/locust/fetch-member.py --master -H http://host.docker.internal:8080
    networks:
      - sso_network

  locust-worker-1:
    <<: *default-worker

  locust-worker-2:
    <<: *default-worker

  locust-worker-3:
    <<: *default-worker

#  # redis - primary-replica
#  redis-primary:
#    image: redis:latest
#    container_name: redis-primary
#    ports:
#      - "6379:6379"
#    volumes:
#      - ./data/redis/redis.conf:/usr/local/etc/redis/redis.conf
#      - ./data/redis/:/data
#    command: >
#       redis-server
#       --bind 0.0.0.0
#       --port 6379
#       --dir /data
#       --appendonly yes
#    networks:
#      concert_book:
#        ipv4_address: 172.30.0.11
#
#  redis-replica:
#    image: redis:latest
#    container_name: redis-replica
#    depends_on:
#      - redis-primary
#    command: ["redis-server", "--replicaof", "172.30.0.11", "6379"]
#    networks:
#      - concert_book
#
#
#  # kafka
#  zookeeper:
#    image: 'bitnami/zookeeper:3.7.2'
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      - ALLOW_ANONYMOUS_LOGIN=yes
#    volumes:
#      - ./data/zookeeper/data:/bitnami/zookeeper/data
#      - ./data/zookeeper/datalog:/bitnami/zookeeper/datalog
#      - ./data/zookeeper/logs:/bitnami/zookeeper/logs
#    networks:
#      concert_book:
#        ipv4_address: 172.30.0.20
#  kafka1:
#    image: 'bitnami/kafka:3.6.0'
#    container_name: kafka1
#    hostname: kafka1
#    ports:
#      - "19092"
#      - "9092:9092"
#    environment:
#      - KAFKA_BROKER_ID=1
#      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
#      - ALLOW_PLAINTEXT_LISTENER=yes
#      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
#      - KAFKA_CFG_LISTENERS=CLIENT://:19092,EXTERNAL://:9092
#      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka1:19092,EXTERNAL://localhost:9092
#      - KAFKA_INTER_BROKER_LISTENER_NAME=CLIENT
#    depends_on:
#      - zookeeper
#    volumes:
#      - ./data/kafka1:/bitnami/kafka/data
#    networks:
#      concert_book:
#        ipv4_address: 172.30.0.21
#
#  kafka-ui:
#    image: 'provectuslabs/kafka-ui:v0.7.1'
#    container_name: kafka-ui
#    ports:
#      - "8081:8080"
#    environment:
#      - KAFKA_CLUSTERS_0_NAME=local
#      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka1:19092
#    depends_on:
#      - zookeeper
#      - kafka1
#    networks:
#      concert_book:
#        ipv4_address: 172.30.0.24

networks:
  sso_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.30.0.0/24